以下是一个基于 React + Node.js + Socket.IO 的实时聊天应用基础代码示例：

### 后端（Node.js + Express + Socket.IO）
```bash
mkdir chat-app && cd chat-app
mkdir server && cd server
npm init -y
npm install express socket.io cors mongoose bcryptjs jsonwebtoken
```

`server/index.js`
```javascript
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
app.use(cors());
app.use(express.json());

// MongoDB 连接
mongoose.connect('mongodb://localhost:27017/chat-app', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// 用户模型
const User = mongoose.model('User', new mongoose.Schema({
  username: { type: String, unique: true },
  password: String
}));

// JWT 密钥
const JWT_SECRET = 'your-secret-key';

// 用户注册
app.post('/register', async (req, res) => {
  try {
    const hashedPassword = await bcrypt.hash(req.body.password, 10);
    const user = new User({
      username: req.body.username,
      password: hashedPassword
    });
    await user.save();
    res.status(201).send('User created');
  } catch (error) {
    res.status(500).send(error.message);
  }
});

// 用户登录
app.post('/login', async (req, res) => {
  const user = await User.findOne({ username: req.body.username });
  if (!user) return res.status(400).send('User not found');
  
  const validPassword = await bcrypt.compare(req.body.password, user.password);
  if (!validPassword) return res.status(400).send('Invalid password');
  
  const token = jwt.sign({ _id: user._id }, JWT_SECRET);
  res.header('auth-token', token).send(token);
});

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});

// Socket.IO 连接
io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  socket.on('join_room', (room) => {
    socket.join(room);
    console.log(`User ${socket.id} joined room ${room}`);
  });

  socket.on('send_message', (data) => {
    socket.to(data.room).emit('receive_message', data);
  });

  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

server.listen(3001, () => {
  console.log('Server running on port 3001');
});
```

### 前端（React）
```bash
cd ..
npx create-react-app client
cd client
npm install socket.io-client react-router-dom axios
```

`client/src/App.js`
```javascript
import React, { useState, useEffect } from 'react';
import io from 'socket.io-client';
import axios from 'axios';
import { BrowserRouter as Router, Route, Link } from 'react-router-dom';

const socket = io.connect('http://localhost:3001');

const Register = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:3001/register', { username, password });
      alert('Registration successful');
    } catch (error) {
      alert(error.response.data);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" placeholder="Username" value={username} onChange={(e) => setUsername(e.target.value)} />
      <input type="password" placeholder="Password" value={password} onChange={(e) => setPassword(e.target.value)} />
      <button type="submit">Register</button>
    </form>
  );
};

const ChatRoom = () => {
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([]);
  const [room, setRoom] = useState('general');

  useEffect(() => {
    socket.on('receive_message', (data) => {
      setMessages(prev => [...prev, data]);
    });
  }, []);

  const sendMessage = () => {
    if (message.trim()) {
      const messageData = {
        room,
        content: message,
        author: localStorage.getItem('username'),
        time: new Date().toLocaleTimeString()
      };
      socket.emit('send_message', messageData);
      setMessage('');
    }
  };

  return (
    <div>
      <div>
        {messages.map((msg, index) => (
          <div key={index}>
            <p>{msg.author}: {msg.content} ({msg.time})</p>
          </div>
        ))}
      </div>
      <input
        type="text"
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
      />
      <button onClick={sendMessage}>Send</button>
    </div>
  );
};

function App() {
  return (
    <Router>
      <div>
        <nav>
          <Link to="/register">Register</Link>
        </nav>

        <Route path="/register" component={Register} />
        <Route path="/chat" component={ChatRoom} />
      </div>
    </Router>
  );
}

export default App;
```

### 运行步骤
1. 启动 MongoDB 服务
2. 后端：
```bash
cd server
node index.js
```
3. 前端：
```bash
cd client
npm start
```

### 主要功能
- 用户注册/登录（JWT 认证）
- 实时消息发送/接收
- 多房间支持
- 消息历史记录

### 技术栈
- 后端：Node.js, Express, Socket.IO, MongoDB
- 前端：React, Socket.IO client
- 认证：JWT
- 数据库：MongoDB